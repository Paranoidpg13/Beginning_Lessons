can check python version with ~ python3 -V

can execute python file with:
    ~ python filename.py 
    Ensure the file path is correct and leads to python file

Basic Arithmetic (+,-,*, /, %, **)
to enter python shell ~ python3
to leave python shell ~ quit()
to clear terminal control L

Variables are piece of memory allocated to computer in named association
    course = "Python 101" (semi colon not needed only new lines and indentation)
    can access multiple times
    
    course = "Python 101"

    print(course)

formatting code requires indentation (tab or four spaces as standard approach)
    to get out of if statement delete tab (space from margin)
    
    course = "Python 101"

    fruit = "strawberry"

    if course == "Python 101":
        # Our code in here
        pass

    if fruit == "strawberry":
        pass

Can comment code wit #
    # TODO: 

Data Types:
    string = "A Sentence" or 'A Sentence'
    integer = 15
    floats = 99.90
    list = ["Item 1", "Item 2", "Item 3"]
                or
        = ['Item 1', integer, float]
    tuple = ("Item 1", "Item 2", "Item 3")
            ('Item 1', integer, float)
    sets = {"Item 1", "Item 2", "Item 3"}
    dictionary = {
        "key": "value",
        "key2": "value2",
    }
    booleans = True # or False
            notice the capitalization
    none = None

Numeric Data Types
    items = 4
    price = 19.97
    can underscore numbers to make number value visible (1_000_000_000_000)

    items = 4
    price = 19.97
    total = items * price
    print(total)

    items = 4 #leads to 4 instances of 19.97 written"
    price = "19.97"
    total = items * price
    print(total)

String Data Types
    can do multi line strings  with """ """
    can enter terminal and find functions with tab twice
        sentence = "A thing in here"
        sentence. tabx2 to find functionalities

List Data Types
    lst = ["String", 1, 3.14, ["A new item"], "Praj"]

    for item in lst:
        print("This item is:", item)

    >>> names = ["Praj", "Pratik"]
    >>> names
    ['Praj', 'Pratik']
    >>> names.append("Mommy")
    >>> names
    ['Praj', 'Pratik', 'Mommy']
    >>> names.remove("Praj")
    >>> names
    ['Pratik', 'Mommy']
    >>> mommy = names.pop() #removes last item in the list
    >>> names
    ['Pratik']
    >>> 

Dictionaries
    can have dictionaries within dictionaries
    person = {
    "key": "value",
    "name": "Praj",
    "instagram": "@paranoidpg13",
    }

    # print(person["instagram"])

    person['github'] = "@Paranoidpg13"
    print(person)

    del person["key"]
    print(person)

Tuples are similar to list and is iterable
    tuples are immutable (not changeable)
    commas are added towards the end of the list to signify tuples
        previous versions of python may consider function instead of tuple
        foods = ('Pizza', 'Fish', 'Tomatoes',)
        for food in foods:
            print("The food is", food)

Set Data Types
    s = {"Item 1", "Item 2", "Item 3"}
    print(s)
    changeable - the result would not have to be in order and multiple entries are compressed to one


booleans
    True or False

none None 
    means nothing (empty variable)

    wallet = None
    if wallet is None:
        print("There nothing in my wallet")
        wallet = 82.45
    print("My wallet has ", wallet)


Indexing and slicing
    list is subscriptable 
    lst = [1,2,3,4,5]
        #  0,1,2,3,4
    indexing: 

    print(lst[0])
    slicing when colon is used:

    print(lst[0:3])
     #[1, 2, 3]
    print(lst[-3::])
     #[3, 4, 5]

    course = "Python 101"
    print(course[5])
     #n

Accepting user input
    currently python is a command line program
    age = input("What is your age?")
    dog_years = int(age) * 7
    print(dog_years)
     # 28 = 196

    name = input("What is your name?")
    print("Hello,", name)
     # Hello, Praj

Type casting
    str list bool dict tuple set 

    grocery_list = ['Apples', 'Oranges', 'Bananas', 'Apples']
    grocery_list = set(grocery_list)
    print(grocery_list)
    print(type(grocery_list))
            -----
    age = input("What is your age? ")
    data_type = type(age)
    print(data_type)

    age = int(age)
    data_type = type(age)
    print(data_type)

    print("Your age in dog years is", (age*7))

Print formatting
    .format
    name = "Praj"

    welcome_message = "Hello {} welcome to Python 101".format(name)

    print(welcome_message)
     #Hello Praj welcome to Python 101
                --- f string ---
    name = "Praj"

    welcome_message = f"Hello {name} welcome to Python 101"

    print(welcome_message)
     #Hello Praj welcome to Python 101
            ----
    name = "Praj"

    welcome_message = "Hello %s welcome to Python 101" % name

    print(welcome_message)
     #Hello Praj welcome to Python 101

Comparison Operators (> >= < <= == !=)
    comparing values to make a decision
    can_code = False

    if can_code == True:
        print("You can code")
    else:
        print("You don't know how to code yet")
     #You don't know how to code yet

    teacher = "Mrs. Ruiz"

    if teacher == "Mrs. Ruiz":
        print("Show the teacher portal")
    else:
        print("It does not appear")
     #Show the teacher portal
    
    teacher = "Mrs. Ruiz"

    if teacher.lower() == "mrs. ruiz":
        print("Show the teacher portal")
    else:
        print("It does not appear")
     #Show the teacher portal

    name = input("What is your name? ")
    if name == "Pratik":
        print("Welcome Pratik")
        bring_food = "Pizza"
    else:
        print("You are not Pratik")
        bring_food = "Salmon"

    print(f"You are eating {bring_food}" )
     #Welcome Pratik
     #You are eating Pizza

    ---- elif statement ----
    name = input("What is your name? ")
    if name == "Pratik":
        print("Welcome Pratik")
        bring_food = "Pizza"
    elif name == "Praj":
        print("Welcome to the student portal")
        bring_food = "Baklavas"
    else:
        print("You are not Pratik")
        bring_food = "Salmon"

    print(f"You are eating {bring_food}" )
     #What is your name? Praj
     #Welcome to the student portal
     #You are eating Baklavas

Comparison shortcuts
    None always returns False or an empty string will result in False
    False also returns False 
    empty tuple set and list returns false

    something = None (or "" or False)

    if something:
        print("This is true")
    else:
        print("This is false")

Multiple comparison Operators
    age = 31
    name = "Dhot"

    #if age >= 18:
        if name == "Dhot":
            print("I can drink alcohol")

    if age>= 18 and name == "Dhot":
        print("I can drink alcohol")
    else: print("Don't do anything")

    if age>= 18 or name == "Dhot":
        print("I can drink alcohol")
    else: print("Don't do anything")

    For Loops
        fav_foods = ['Pizza', 'Tacos', 'Salmon']
        fav_foods = set(fav_foods)

    for food in fav_foods:
        # if food == "Pizza":
        #     size = input("What size pizza would you like? ")
        #     print(f"You order a {size} pizza")
        print(food)

---- Letters indexing instead of list iteration -----

    food = "Pizza!"
    for letter in food:
        print(letter)

---- Key Value dictionary ------
    person = {
        "name": "Praj",
        "instagram": "@paranoidpg13",
        "Workout_acc": "BAADRack"

    }

    for key, value in person.items():
        print(f"The key is {key}. While the value is {value}.")

While loops 
    for loops loop through every item in an iterable but while loop is not silent.
    
    num = 0

    while num <= 100:
        print(num)
        num = num + 1

Break and Continue
    items = ['One', 'Two', 'Three', 'Four', 'Five']

# for item in items:
#     if item == 'Two' or item == 'Four':
#         continue

#     print(item)
        #One 
        #Three
        #Five
    -- break --
    for item in items:
        if item == "Three":
            break

        print(item)
        #One
        #Two
    -- while --

    num = 0 
    while num <= 20: 
        num = num + 1 #moved to here as it needs to increment
        if num % 2 == 0:
            continue
        print(num)
    
    -- break --

    num = 0 
    while num <= 1_000_000: 
        num = num + 1 #moved to here as it needs to increment
        if num == 13:
            break
        print(num)

Function 
    def is used instead of function

    def somename(name):
        print(f"Hello {name}")

    somename("Pratik")

    --- second parameter ---

    def somename(name, food):
        print(f"Hello {name}. Let's eat some {food}")

    somename("Pratik", "Pizza")

    --- Person Gender ---
    def somename(name, food):
        if name is None:
            name = "Mommy"
        person_gender = "Woman"
        if name == "Parashu":
            person_gender = "Man"
        print(person_gender)

        print(f"Hello {name}. Let's eat some {food}")

    somename("Parashu", "Pizza")

    --- with simple return function ---
    # def somefunction():
    #     return "a value"

    # thing = somefunction()
    # print(thing)

    --- exponent function ---
    def exp(num1, num2):
        total = num1 ** num2
        return total
    big_number = exp(25,2)
    print(big_number)

Scope
    when code is inside function not accessible from outside
    if a variable not defined inside a function will look outside of function
        called closure
    if variable outside is defined and defined again inside a function called scoping
    can pass variable explicitly onto a function unlike javascript

Local server
    ~ python3 -m http.server
    reads localhost:8000
     given the files 

